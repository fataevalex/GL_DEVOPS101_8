# clusters/my-k3s-cluster/infra/kube2iam/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube2iam
  namespace: kube-system
  labels:
    app.kubernetes.io/name: kube2iam
    app.kubernetes.io/instance: kube2iam
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: kube2iam
      app.kubernetes.io/instance: kube2iam
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kube2iam
        app.kubernetes.io/instance: kube2iam
    spec:
      hostNetwork: true
      serviceAccountName: kube2iam
      tolerations:
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
      containers:
        - name: kube2iam
          image: jtblin/kube2iam:0.13.0
          args:
            - '--host-interface=cni0'
            - '--node=$(NODE_NAME)'
            - '--iptables=true'
#            - '--base-role-arn=arn:aws:iam::682364461498:role/sops-kms-role'
            - '--log-level=debug'
            - '--app-port=8181'
            - '--metrics-port=8181'
            - '--host-ip=$(HOST_IP)'
            - '--metadata-addr=127.0.0.1'
            - '--auto-discover-default-role=false'
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: AWS_DEFAULT_REGION
              valueFrom:
                secretKeyRef:
                  name: kube2iam-aws-credentials
                  key: AWS_DEFAULT_REGION
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: kube2iam-aws-credentials
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: kube2iam-aws-credentials
                  key: AWS_SECRET_ACCESS_KEY
          ports:
            - containerPort: 8181
              name: http
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8181
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
                - NET_RAW
            # *** ДОБАВЬТЕ ЭТИ VOLUME MOUNTS ***
            privileged: true # Часто требуется для манипуляций с iptables
          volumeMounts:
            - name: xtables-lock
              mountPath: /run/xtables.lock
            - name: lib-modules
              mountPath: /lib/modules
              readOnly: true
            - name: host-sys
              mountPath: /sys
              readOnly: true
      # *** ДОБАВЬТЕ ЭТИ VOLUMES НА УРОВНЕ SPEC.TEMPLATE.SPEC ***
      volumes:
        - name: xtables-lock
          hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
        - name: lib-modules
          hostPath:
            path: /lib/modules
            type: Directory
        - name: host-sys
          hostPath:
            path: /sys
            type: Directory